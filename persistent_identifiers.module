<?php

/**
 * @file
 * Contains the persistent_identifiers.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_presave().
 */
function persistent_identifiers_entity_presave(EntityInterface $entity) {
  $module_handler = \Drupal::service('module_handler');
  if ($module_handler->moduleExists('context')) {
    $context_manager = \Drupal::service('context.manager');
    $reactions = $context_manager->getActiveReactions('persistent_identifiers_add_pid');
    // @todo: We only want to fire the first active reaction.
    foreach ($reactions as $reaction) {
      $reaction->execute($entity);
    }
  }
}

/**
 * Implements hook_form_node_form_alter().
 */
function persistent_identifiers_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('persistent_identifiers.settings');
  $entity = $form_state->getFormObject()->getEntity();
  $content_type = $entity->bundle();
  $allowed_types = $config->get('persistent_identifiers_bundles');

  if (\Drupal::currentUser()->hasPermission('mint persistent identifiers')) {
    if (in_array($content_type, $allowed_types)) { // <- @todo: Not working?
      $minter = \Drupal::service($config->get('persistent_identifiers_minter'));
      $pid_type = $minter->getPidType();
      $form['persistent_identifiers_node_options'] = [
        '#type' => 'fieldset',
        '#access' => TRUE,
        '#title' => t('Persistent Identifier'),
        '#weight' => 100,
      ];
      $form['persistent_identifiers_node_options']['mint_and_persist'] = [
        '#type' => 'checkbox',
        '#title' => t('Mint @pid_type', ['@pid_type' => $pid_type]),
	'#description' => t('To mint a @pid_type for this node, check this box and then save the node.', ['@pid_type' => $pid_type]),
        '#attributes' => [
          'id' => 'persistent_identifiers_mint_and_persist',
        ],
      ];

      $form['actions']['submit']['#submit'][] = 'persistent_identifiers_mint_from_form';
    }
  }
}

/**
 * Submit callback.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function persistent_identifiers_mint_from_form(array &$form, FormStateInterface $form_state) {
  $config = \Drupal::config('persistent_identifiers.settings');
  $entity = $form_state->getFormObject()->getEntity();
  $content_type = $entity->bundle();
  $allowed_types = $config->get('persistent_identifiers_bundles');
  $mint_and_persist = $form_state->getValue('mint_and_persist', FALSE);
  if ($mint_and_persist && $entity->getEntityTypeId() == 'node' && in_array($content_type, $allowed_types)) {
    $minter = \Drupal::service($config->get('persistent_identifiers_minter'));
    $pid = $minter->mint($entity, $form_state);
    $persister = \Drupal::service($config->get('persistent_identifiers_persister'));
    if ($persister->persist($entity, $pid)) {
      \Drupal::logger('persistent_identifiers')->info(t("Persistent identifier %pid minted for node @nid.", ['%pid' => $pid, '@nid' => $entity->id()]));
      \Drupal::messenger()->addStatus(t("Persistent identifier %pid minted and added to this node.", ['%pid' => $pid]));
    }
    else {
      \Drupal::logger('persistent_identifiers')->warning(t("Persistent identifier %pid minted for node @nid but not persisted.", ['%pid' => $pid, '@nid' => $entity->id()]));
      \Drupal::messenger()->addWarning(t("Persistent identifier %pid minted but not added to this node.", ['%pid' => $pid]));
    }
  }
}
