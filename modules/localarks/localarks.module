<?php

/**
 * @file
 * Contains the localarks.module.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */
function localarks_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  if ($form_id == 'persistent_identifiers_admin_settings') {
    $config = \Drupal::config('localarks.settings');

    $form['localarks_redirector_host'] = [
      '#type' => 'textfield',
      '#access' => TRUE,
      '#title' => 'Redirecting hostname',
      '#default_value' => $config->get('localarks_redirector_host'),
      '#description' => t("Full hostname, including 'https://' and the trailing '/', of the redirector hostname. Do not change this value unless you are running your own resolution server."),
      '#states' => [
        'visible' => [
          ':input[id="persistent_identifiers_minter"]' => ['value' => 'localarks.minter.localarks'],
        ],
      ],
    ];
    $form['localarks_log_redirects'] = [
      '#type' => 'checkbox',
      '#default_value' => $config->get('localarks_log_redirects'),
      '#title' => t('Log redirects from this host'),
      '#states' => [
        'visible' => [
          ':input[id="persistent_identifiers_minter"]' => ['value' => 'localarks.minter.localarks'],
        ],
      ],
    ];
    $form['localarks_naan'] = [
      '#type' => 'textfield',
      '#title' => 'NAAN',
      '#default_value' => $config->get('localarks_naan'),
      '#description' => t("Your insitution's NAAN. You must get this from N2T."),
      '#states' => [
        'visible' => [
          ':input[id="persistent_identifiers_minter"]' => ['value' => 'localarks.minter.localarks'],
        ],
      ],
    ];
    $form['localarks_local_shoulder'] = [
      '#type' => 'textfield',
      '#title' => 'Local shoulder',
      '#default_value' => $config->get('localarks_local_shoulder'),
      '#description' => t("Shoulder to prepend to ARKs minted by this module. Leading '/' is optional. Leave empty to use no shoulder."),
      '#states' => [
        'visible' => [
          ':input[id="persistent_identifiers_minter"]' => ['value' => 'localarks.minter.localarks'],
        ],
      ],
    ];
    $form['localarks_shoulders'] = [
      '#type' => 'textarea',
      '#title' => 'External shoulders',
      '#default_value' => $config->get('localarks_shoulders'),
      '#description' => t("Strings prepended to ARK id strings, used to specify the department/unit within your organization. Entries should be in comma-separated `/shoulder,baseurl` form, one per line. Leave empty to use no shoulders. See the README for more info."),
      '#states' => [
        'visible' => [
          ':input[id="persistent_identifiers_minter"]' => ['value' => 'localarks.minter.localarks'],
        ],
      ],
    ];

    $form['#submit'][] = 'localarks_submit';
  }
}

/**
 * Submit callback.
 *
 * Saves the value of the minter-specific field defined in the implementation
 * of hook_form_alter() above.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function localarks_submit(array &$form, FormStateInterface $form_state) {
  $existing_config = \Drupal::config('localarks.settings');
  $localarks_redirector_host = $form_state->getValue('localarks_redirector_host', $existing_config->get('localarks_redirector_host'));
  $localarks_naan = $form_state->getValue('localarks_naan', $existing_config->get('localarks_naan'));
  $localarks_log_redirects = $form_state->getValue('localarks_log_redirects', $existing_config->get('localarks_log_redirects'));
  $localarks_local_shoulder = $form_state->getValue('localarks_local_shoulder', $existing_config->get('localarks_local_shoulder'));
  $localarks_shoulders = $form_state->getValue('localarks_shoulders', $existing_config->get('localarks_shoulders'));

  $config_factory = \Drupal::configFactory();
  $config_factory->getEditable('localarks.settings')
    ->set('localarks_redirector_host', trim($localarks_redirector_host))
    ->set('localarks_naan', trim($localarks_naan))
    ->set('localarks_log_redirects', $localarks_log_redirects)
    ->set('localarks_local_shoulder', trim(ltrim($localarks_local_shoulder, '/')))
    ->set('localarks_shoulders', trim($localarks_shoulders))
    ->save();
}
