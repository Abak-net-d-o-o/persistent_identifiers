<?php

/**
 * @file
 * Contains the persistent_identifiers.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\path_alias\Entity\PathAlias;

/**
 * Implements hook_form_node_form_alter().
 */
function persistent_identifiers_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('persistent_identifiers.settings');
  $entity = $form_state->getFormObject()->getEntity();
  $content_type = $entity->bundle();
  $allowed_types = $config->get('persistent_identifiers_bundles');

  if (!in_array($content_type, $allowed_types, TRUE)) {
    return;
  } 

  if (\Drupal::currentUser()->hasPermission('mint persistent identifiers')) {
    $minter = \Drupal::service($config->get('persistent_identifiers_minter'));
    $pid_type = $minter->getPidType();
    $form['persistent_identifiers_node_options'] = [
      '#type' => 'fieldset',
      '#access' => TRUE,
      '#title' => t('Persistent Identifier'),
      '#weight' => 99,
    ];
    $form['persistent_identifiers_node_options']['mint_and_persist'] = [
      '#type' => 'checkbox',
      '#title' => t('Create @pid_type', ['@pid_type' => $pid_type]),
      '#attributes' => [
        'id' => 'persistent_identifiers_mint_and_persist',
      ],
    ];
    $form['actions']['submit']['#submit'][] = 'persistent_identifiers_mint_from_form';
  }
}

/**
 * Submit callback.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function persistent_identifiers_mint_from_form(array &$form, FormStateInterface $form_state) {
  $config = \Drupal::config('persistent_identifiers.settings');
  $entity = $form_state->getFormObject()->getEntity();
  $content_type = $entity->bundle();
  $allowed_types = $config->get('persistent_identifiers_bundles');
  $mint_and_persist = $form_state->getValue('mint_and_persist', FALSE);
  if ($mint_and_persist && $entity->getEntityTypeId() == 'node' && in_array($content_type, $allowed_types, TRUE)) {
    $minter = \Drupal::service($config->get('persistent_identifiers_minter'));
    $pid = $minter->mint($entity, $form_state);
    if (is_null($pid)) {
      \Drupal::logger('persistent_identifiers')->warning(t("Persistent identifier not created for node @nid.", ['@nid' => $entity->id()]));
      \Drupal::messenger()->addWarning(t("Problem creating persistent identifier for this node. Details are available in the Drupal system log."));
      return;
    }
    $persister = \Drupal::service($config->get('persistent_identifiers_persister'));
    if ($persister->persist($entity, $pid)) {
      \Drupal::logger('persistent_identifiers')->info(t("Persistent identifier %pid created for node @nid.", ['%pid' => $pid, '@nid' => $entity->id()]));
      \Drupal::messenger()->addStatus(t("Persistent identifier %pid created for this node.", ['%pid' => $pid]));
    }
    else {
      \Drupal::logger('persistent_identifiers')->warning(t("Persistent identifier not created for node @nid.", ['@nid' => $entity->id()]));
      \Drupal::messenger()->addWarning(t("Problem creating persistent identifier for this node. Details are available in the Drupal system log."));
    }
  }
}

/**
 * Implements hook_jsonld_alter_normalized_array().
 */
function persistent_identifiers_jsonld_alter_normalized_array(EntityInterface $entity, array &$normalized, array $context) {
  if ($entity->getEntityTypeId() == 'node') {
    $config = \Drupal::config('persistent_identifiers.settings');
    $map_to_schema_sameas = $config->get('persistent_identifiers_map_to_schema_sameas');
    if (!$map_to_schema_sameas) {
      return;
    }

    $resolver_base_url = $config->get('persistent_identifiers_resolver_base_url');
    $pid_field_name = $config->get('persistent_identifiers_target_field');
    if ($entity->hasField($pid_field_name)) {
      $pid_field_values = $entity->get($pid_field_name)->getValue();
      // Take the first identifier.
      if (is_array($pid_field_values) && !is_null($pid_field_values[0]) && array_key_exists('value', $pid_field_values[0])) {
        $pid = $pid_field_values[0]['value'];
      }
    }

    if (isset($pid) && isset($normalized['@graph'])) {
      if (strlen($resolver_base_url) && !preg_match('/^http/', $pid)) {
        $normalized['@graph'][0]['http://schema.org/sameAs'][] = [
          '@id'  => $resolver_base_url . $pid,
	];
      }
      else {
        $normalized['@graph'][0]['http://schema.org/sameAs'][] = [
          '@id'  => $pid,
	];
      }
    }
  }
}

function persistent_identifiers_create_alias($entity_id, $pid) {
  $config = \Drupal::config('persistent_identifiers.settings');
  if ($config->get('persistent_identifiers_create_url_alias')) {
    $path = parse_url($pid, PHP_URL_PATH);
    // Remove PID namespaces such as 'ark:'.
    $path = preg_replace('!^.*:!', '', $path);
    $path_alias = PathAlias::create(['path' => '/node/' . $entity_id, 'alias' => '/' . ltrim($path, '/')]);
    $path_alias->save();
  }
}

